{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA;;;;AAIA;;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;AAMA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"test-compiled.js","sourcesContent":["/**\n * Created by Administrator on 2016/10/17.\n */\n\n'use strict';\n\n/*\n * **********************************************************\n * 字符串\n * **********************************************************\n * */\n\n// const [a,b,c] = ['apple', 'orange', 'banner'];\n//\n// const cc = a + ' ' + `${b}` + ' ' + c;\n//\n// console.log(cc);\n\n\n/*\n * **********************************************************\n * 解构赋值\n * **********************************************************\n * */\n\n// const arr = [1, 2, 3, 4];\n// const username = {first: 'can', second: 'volcano'};\n//\n// const {first, second} = username;\n//\n// console.log(first + ' ' + second);\n\n/*--------------------------------------------------*/\n// good\n// function getFullName(obj) {\n//     const {first, second} = obj;\n//     console.log(first + second);\n// }\n\n// best\n// function getFullName({first, second}) {\n//     console.log(first + ' ' + second);\n// }\n//\n// getFullName(username);\n\n/*--------------------------------------------------*/\n\n\n// var input = {left: 'can', right: 'volcano'};\n//\n// function processInput(input) {\n//     const {left, right} = input;\n//     return {left: left, right: right};\n// }\n//\n// console.log(processInput(input));\n\n/*\n * **********************************************************\n * 对象\n * **********************************************************\n * */\n\n// const a = {c1: 'k1', c2: 'k2'};\n// const b = {\n//     c1: 'k1',\n//     c2: 'k2',\n// };\n//\n// console.log(a.c1);\n\n/*--------------------------------------------------*/\n\n// if reshape unavoidable\n// const a = {};\n// Object.assign(a, { x: 3 });\n//\n\n// good\n// const a = { x: null };\n// a.x = 3;\n\n// console.log(a);\n\n/*--------------------------------------------------*/\n\n// 属性名是动态修改\n// const obj = {\n//     id: 5,\n//     name: 'San Francisco',\n//     [getKey('enabled')]: true,\n// };\n//\n// function getKey(k) {\n//     return `a key named ${k}`;\n// };\n//\n//\n// console.log(obj);\n\n//使用对象方法简写方式\n// const atom = {\n//     value: 1,\n//\n//     addValue(value) {\n//         return atom.value + value;\n//     },\n// };\n\n//使用对象属性简写方式\n// const lukeSkywalker = 'Luke Skywalker';\n// const obj = {\n//     lukeSkywalker,\n// };\n\n//把简写风格的属性声明放置在你对象声明的开始部分\n// const anakinSkywalker = 'Anakin Skywalker';\n// const lukeSkywalker = 'Luke Skywalker';\n//\n// const obj = {\n//     lukeSkywalker,\n//     anakinSkywalker,\n//     episodeOne: 1,\n//     twoJediWalkIntoACantina: 2,\n//     episodeThree: 3,\n//     mayTheFourth: 4,\n// };\n\n//只有当属性名称非法的时候才用引号包裹起来\n// const good = {\n//     foo: 3,\n//     bar: 4,\n//     'data-blah': 5,\n// };\n\n\n/*\n * **********************************************************\n * 数组\n * **********************************************************\n * */\n\n//声明数组时使用字面量语法\n// const items = [];\n\n//当需要给数组添加内容时使用，push方法代替直接分配\n// const someStack = [];\n// someStack.push('abracadabra');\n\n//使用解构赋值来复制数组\n// const items = ['a', 'b', 'c', 'd', 'e'];\n// const itemsCopy = [...items];\n// console.log(itemsCopy);\n\n//转变一个类数组的对象为数组的时候，使用Array.from\n// function f() {\n//     return Array.from(arguments);\n// };\n//\n// let r = f(1, 2, 3);\n//\n// console.log(r);\n\n//立即执行函数可以写成箭头函数的形式\n// (() => {\n//     console.log('Welcome to the Internet.');\n// })();\n\n//函数表达式\n// const arr = [1, 2, 3];\n// let r = arr.map(x => x + 1);\n// console.log(r);\n\n//不再绑定this\n// const boundMethod = (...params) => method.apply(this, params);\n\n//布尔值不可以直接作为参数\n// function divide(a, b, { option = false } = {}) {}\n\n//使用默认值语法设置函数参数的默认值。\n// function handleThings(opts = {}) {\n//     // ...\n// }\n\n\n/*\n * **********************************************************\n * MAP\n * **********************************************************\n * */\n\n// const numbers = [1, 2, 3, 4, 5];\n//\n// sum === 15;\n//\n// let sum = 0;\n// numbers.forEach(num => sum += num);\n// sum === 15;\n//\n// const sum = numbers.reduce((total, num) => total + num, 0);\n// sum === 15;\n\n// for (let value of map.values()) {\n//     console.log(value);\n// }\n//\n// for (let item of map.entries()) {\n//     console.log(item[0], item[1]);\n// }\n"]}